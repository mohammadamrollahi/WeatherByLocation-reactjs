{"version":3,"sources":["logo.svg","component/ShowWeather/ShowWeather.jsx","component/GetLocation/GetLocation.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ShowWeather","myWeather","className","city","country","GetLocation","useState","temp","icon","status","description","humidity","setMyWeather","myLocation","setmyLocation","promise","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","Error","useEffect","then","obj","e","alert","console","log","longitude","undefined","latitude","axios","get","res","data","name","sys","main","weather","catch","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,kKCa5BC,MAXf,YAAmC,IAAbC,EAAY,EAAZA,UAClB,OACI,yBAAKC,UAAU,qBACX,yBAAKA,UAAU,WACX,2BAAID,EAAUE,KAAd,IAAqBF,EAAUG,SAC/B,+BCiDGC,EApDK,WAAO,IAAD,EACIC,mBAAS,CACnCH,KAAK,GACLC,QAAQ,GACRG,KAAK,GACLC,KAAK,GACLC,OAAO,GACPC,YAAY,GACZC,SAAS,KARa,mBACpBV,EADoB,KACVW,EADU,OAUWN,mBAAS,IAVpB,mBAUfO,EAVe,KAUJC,EAVI,KAYlBC,EAAU,IAAIC,SAAQ,SAAUC,EAASC,GACjCC,UAAUC,YACVD,UAAUC,YAAYC,oBAAmB,SAAAC,GACrCL,EAAQK,EAASC,WAKzBL,EAAOM,MAAM,qBA2BrB,OAxBAC,qBAAU,WACNV,EAAQW,MAAK,SAACC,GACVb,EAAca,MAChB,SAACC,GAAD,OAAKC,MAAMD,QAEf,IACFH,qBAAU,WACNK,QAAQC,IAAIlB,EAAWmB,gBACCC,GAArBpB,EAAWqB,UACdC,IAAMC,IAAN,8DAAiEvB,EAAWqB,SAA5E,gBAA4FrB,EAAWmB,UAAvG,kBArBS,mCAqBT,mBAEKN,MAAK,SAAAW,GACFP,QAAQC,IAAIM,EAAIC,MACf1B,EAAa,CACTT,KAAKkC,EAAIC,KAAKC,KACdnC,QAAQiC,EAAIC,KAAKE,IAAIpC,QACrBG,KAAK8B,EAAIC,KAAKG,KAAKlC,KACnBC,KAAK6B,EAAIC,KACT7B,OAAO4B,EAAIC,KAAKI,QAAQ,GAAGD,KAC3B/B,YAAY2B,EAAIC,KAAKI,QAAQ,GAAGhC,YAChCC,SAAS0B,EAAIC,KAAKG,KAAK9B,cAE7BgC,OAAM,SAACf,GAAD,OAAKE,QAAQC,IAAIH,QAChC,CAACf,IAEC,kBAAC,EAAD,CAAaZ,UAAWA,K,MCnCrB2C,MAZf,WAGE,OACE,yBAAK1C,UAAU,OACb,4BAAUA,UAAU,cAChB,kBAAC,EAAD,SCCU2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBnC,WACrBA,UAAUoC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdf,OAAM,SAAAgB,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.fd5204fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport \"./ShowWeather.scss\"\r\nfunction ShowWeather({myWeather}) {\r\n    return (\r\n        <div className=\"weather-container\">\r\n            <div className=\"cityDiv\">\r\n                <p>{myWeather.city} {myWeather.country}</p>\r\n                <p></p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShowWeather\r\n","import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios'\r\nimport ShowWeather from '../ShowWeather/ShowWeather'\r\n\r\n    const GetLocation = () => {\r\n    const[myWeather,setMyWeather]=useState({\r\n        city:'',\r\n        country:'',\r\n        temp:'',\r\n        icon:'',\r\n        status:'',\r\n        description:'',\r\n        humidity:'',\r\n    })\r\n        const [myLocation,setmyLocation]=useState({})\r\n        const apikey='eb30e0f85a64d426cd77d65a96f11787'\r\n        let promise = new Promise(function (resolve, reject) {\r\n                if (navigator.geolocation) {\r\n                    navigator.geolocation.getCurrentPosition(position => {\r\n                        resolve(position.coords)\r\n\r\n                    })\r\n                }\r\n                else\r\n                reject(Error(\"network error\"))\r\n\r\n        })\r\n        useEffect(()=>{\r\n            promise.then((obj)=>{\r\n                setmyLocation(obj)\r\n            },(e)=>alert(e))\r\n\r\n        },[])\r\n        useEffect(()=>{\r\n            console.log(myLocation.longitude)\r\n            if(myLocation.latitude!=undefined)\r\n            axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${myLocation.latitude}&lon=${myLocation.longitude}&appid=${apikey}\r\n            `)\r\n                .then(res=>{\r\n                    console.log(res.data)\r\n                     setMyWeather({\r\n                         city:res.data.name,\r\n                         country:res.data.sys.country,\r\n                         temp:res.data.main.temp,\r\n                         icon:res.data,\r\n                         status:res.data.weather[0].main,\r\n                         description:res.data.weather[0].description,\r\n                         humidity:res.data.main.humidity,\r\n                     })\r\n                }).catch((e)=>console.log(e))\r\n        },[myLocation])\r\n        return (\r\n            <ShowWeather myWeather={myWeather}/>\r\n        );\r\n    };\r\n\r\n    export default GetLocation;","import React from 'react';\nimport logo from './logo.svg';\nimport GetLocation from \"./component/GetLocation/GetLocation\";\nimport './App.css';\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <header   className=\"App-header\">\n          <GetLocation/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}